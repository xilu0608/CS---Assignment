#!!!R code for modifying the JSON file


# Load the package required to read JSON files.
install.packages("rjson")
install.packages("jsonlite")
install.packages("data.table")


library(rjson)
library(tibble)
library(tidyr)
library("purrr")
library(dplyr)
library(data.table)


# Import the JSON file and convert it into a data frame
mydata <- fromJSON(file="TVs-all-merged.json")
mydata
new_list= list()
for (i in mydata){
  new_list = c(new_list,i)
}
new_list
dfs <-lapply(new_list, data.frame, stringsAsFactors = FALSE)
data <- rbindlist(dfs, fill=TRUE)
summary(data)


#Extract the title column and export it as a csv file
product = c(1:1624)
title <- data[,43]
d <- cbind(product,title)
write.csv(d,"Description3.csv", row.names = FALSE)



#!!!Python Code
import json
import pandas as pd
import time
import numpy as np
import csv
import re
import copy
from random import shuffle
from itertools import combinations


# import the csv file and convert it to a dictionary.
mydict = {}
with open('Description3.csv', mode='r') as inp:
    reader = csv.reader(inp)
    df = {rows[0]:rows[1] for rows in reader}
#remove the header in the dictionary
df.pop('product')
#check if the number of keys is correct in the dictionary
len(df)


#choose whether to use regex to extract Model Words or not, still need to modified a bit here not suggest to use.
#for i in df:
    #df[i] = re.findall('([a-zA-Z0-9]*(([0-9]+[ˆ0-9, ]+)|([ˆ0-9, ]+[0-9]+))[a-zA-Z0-9]*)',df[i])


# create the slingling function
def shingle(text: str, k: int):
    shingle_set = []
    for i in range(len(text) - k + 1):     
        shingle_set.append(text[i:i+k])
    return set(shingle_set)   


#shingling the title for each product, with k = 5.
shingle_df = copy.deepcopy(df)
k = 5
for i in shingle_df:
    shingle_df[i] = shingle(shingle_df[i],k)
shingle_df


# create the vocabulary list to combine slinglings of all products to a vector set
vocab1 = set()
for i in shingle_df:
    vocab1 = set(vocab1.union(shingle_df[i]))
vocab_list = list(vocab1)
vocab_list


#Converting the shingling to binary vector for all products
vocab_df = copy.deepcopy(df)
for i in vocab_df:
    vocab_df[i] = vocab_list
for i in vocab_df:
    vocab_df[i] = [1 if x in shingle_df[i] else 0 for x in vocab_df[i]]
vocab_df


#Give permutation to each binary value in every product
hash_ex = list(range(1,len(vocab_list)+1))
print(hash_ex)


#Hash the permutation randomly
shuffle(hash_ex)
print(hash_ex)


#Find the signature with then number of the first row equals to 1
for i in range(1, len(vocab_list)+1):
    idx = hash_ex.index(i)
    signature_val = vocab_df['1'][idx]
    print(f"{i} -> {idx} -> {signature_val}")
    if signature_val == 1:
        print('match!')
        break


#Create functions for signature matrix
def create_hash_func(size: int):
    # function for creating the hash vector/function
    hash_ex = list(range(1, len(vocab_list)+1))
    shuffle(hash_ex)
    return hash_ex   #here return the hashed permutaiton：（38，82，5，10，12，69，...）

def build_minhash_func(vocab_size: int, nbits: int):
    # function for building multiple minhash vectors
    hashes = []
    for _ in range(nbits):
        hashes.append(create_hash_func(vocab_size))  
    return hashes
    
# we create 20 minhash vectors
minhash_func = build_minhash_func(len(vocab_list),20) 

def create_hash(vector: list):
    # use this function for creating our signatures (eg the matching)
    signature = []
    for func in minhash_func:
        for i in range(1, len(vocab_list)+1):
            idx = func.index(i)     
            signature_val = vector[idx]  
            if signature_val == 1:
                signature.append(i)
                break
    return signature


#now create signatures
sig_df = copy.deepcopy(vocab_df)
for i in sig_df:
    sig_df[i] = create_hash(sig_df[i])
 sig_df

#def jaccard(x,y):
    #return len(x.intersection(y)) / len(x.union(y)) 
#intersection: return a set that contains items in both x and y


#Perform the LSH, create the LSH functions
def split_vector(signature, b):
    assert len(signature) % b == 0 #reminder must be zero
    r = int(len(signature) / b)
    #code splitting signature in b parts
    subvecs = []
    for i in range(0, len(signature), r):
        subvecs.append(signature[i: i+r])
    return subvecs


band_df = copy.deepcopy(sig_df)
for i in band_df:
    band_df[i] = split_vector(band_df[i],10)


#Locality-Sensitive Hashing and return the candidate pair.
for key1, key2 in combinations(band_df.keys(), r = 2):
    for i_rows, j_rows in zip(band_df[key1], band_df[key2]):
            if i_rows == j_rows:
                print(f"Candidate pair: {key1,key2} {i_rows} == {j_rows}")
